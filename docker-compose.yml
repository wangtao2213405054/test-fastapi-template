
services:
  app:  # 应用服务器
    container_name: app  # 容器名称
    image: app_image
    env_file:  # 从 .env 文件中加载环境变量
      - .env
    build:  # 如果镜像不存在则根据 Dockerfile 构建镜像
      context: .  # 上下文目录为当前目录
      dockerfile: Dockerfile  # 使用当前目录下的 Dockerfile 构建镜像
    volumes:  # 将当前主机目录挂载到容器内的 /src 目录
      - ./:/src
    ports:  # 将 主机的 16000 端口映射到容器的 8006 端口
      - "16000:8006"
    depends_on:  # 依赖于 app_db 确保 app_db 优先启动
      - app_db

  app_db:  # 数据库服务器
    container_name: app_db
    hostname: app_db  # 主机名称
    image: mysql:9.0  # mysql 9.0 镜像
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: 123456  # 设置 Mysql 密码
      TZ: Asia/BeiJing  # 容器时区为北京
    volumes:
      - app_mysql_data:/var/lib/mysql  # 持久化数据库数据
      - app_mysql_data_backups:/backups  # 数据库备份
      - ./scripts/mysql:/scripts  # 本地脚本映射到容器内 /scripts 目录
    command:
      - --character-set-server=utf8mb4  # 设置数据库字符集为 utf8mb4
      - --collation-server=utf8mb4_general_ci  # 设置排序规则为 utf8mb4_general_ci
    ports:
      - "33306:3306"  # 将主机的 33306 端口映射到 容器的 3306 端口

  app_redis:  # redis 配置
    image: redis:6.2-alpine  # Redis 镜像
    hostname: redis
    container_name: app_redis
    command:
      - 'redis-server'  # 启动 redis 服务
      - '--requirepass myStrongPassword'  # 设置 Redis 密码
    ports:
      - "36379:6379"  # 将主机的 36379 端口映射到 容器的 6379 端口

volumes:  # 数据持久化
  app_mysql_data:
    driver: "local"
  app_mysql_data_backups:
    driver: "local"

networks:  # 指定外部网络
  default:
    external: true  # 使用外部定义的网络
    name: app_main  # 外部定义的网络名称